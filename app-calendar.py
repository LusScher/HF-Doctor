from datetime import datetime, timedelta
import gradio as gr
from huggingface_hub import InferenceClient
import os
import json
import logging
from symptom_classifier import define_specialist
from google.oauth2 import service_account
from googleapiclient.discovery import build

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Calendar ---
SCOPES = ['https://www.googleapis.com/auth/calendar']
CALENDAR_ID = os.environ.get('GOOGLE_CALENDAR_ID')

def get_calendar_service():
    creds = service_account.Credentials.from_service_account_info(
        json.loads(os.environ['GOOGLE_CREDS']),
        scopes=SCOPES
    )
    return build('calendar', 'v3', credentials=creds)

def load_system_prompt():
    try:
        with open("prompt-doctor.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except Exception as e:
        logger.error(f"Error loading prompt: {e}")
        return """–í—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É. –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–∑ prompt-doctor.txt"""

SYSTEM_PROMPT = load_system_prompt()
client = InferenceClient(token=os.environ.get("HF_TOKEN"))

def format_prompt(message: str, history: list) -> str:
    prompt = f"{SYSTEM_PROMPT}\n\n"
    for user, assistant in history:
        prompt += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}\n–ü–æ–º–æ—â–Ω–∏–∫: {assistant}\n"
    prompt += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}\n–ü–æ–º–æ—â–Ω–∏–∫: "
    return prompt

def schedule_appointment(name: str, symptoms: str) -> str:
    try:
        specialist = define_specialist(symptoms)
        appointment_time = datetime.now() + timedelta(hours=3)
        
        service = get_calendar_service()
        event = {
            'summary': f'–ü—Ä–∏–µ–º: {name}, {specialist}',
            'description': f'–°–∏–º–ø—Ç–æ–º—ã: {symptoms}. –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
            'start': {
                'dateTime': appointment_time.isoformat(),
                'timeZone': 'Europe/Moscow'
            },
            'end': {
                'dateTime': (appointment_time + timedelta(minutes=30)).isoformat(),
                'timeZone': 'Europe/Moscow'
            }
        }
        
        service.events().insert(
            calendarId=CALENDAR_ID,
            body=event
        ).execute()
        
        return f"–ó–∞–ø–∏—Å—å –∫ {specialist} –Ω–∞ {appointment_time.strftime('%d.%m.%Y %H:%M')} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def generate_response(message: str, history: list):
    try:
        if "—Å–∏–º–ø—Ç–æ–º" in message.lower() or "–∑–∞–ø–∏—Å—å" in message.lower():
            if not hasattr(generate_response, "step"):
                generate_response.step = 0
            
            if generate_response.step == 0:
                generate_response.step = 1
                return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã."
            
            if generate_response.step == 1:
                name, *symptoms = message.split(' ', 1)
                symptoms = symptoms[0] if symptoms else ""
                response = schedule_appointment(name.strip(), symptoms.strip())
                generate_response.step = 0
                return response
        
        prompt = format_prompt(message, history)
        stream = client.text_generation(
            prompt,
            max_new_tokens=512,
            temperature=0.3,
            stream=True
        )
        
        full_response = ""
        for token in stream:
            full_response += token
            yield full_response
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        yield "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

custom_theme = gr.themes.Default(
    primary_hue="blue",
    secondary_hue="teal",
    font=[gr.themes.GoogleFont("Open Sans")]
)

with gr.Blocks(theme=custom_theme) as app:
    gr.Markdown("# Doctor AI ü§ñ")
    gr.Markdown("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É")
    
    gr.ChatInterface(
        fn=generate_response,
        examples=[
            ["–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã."],
            ["–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤. –ë–æ–ª–∏—Ç –≥–æ—Ä–ª–æ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É..."]
        ]
    )

if __name__ == "__main__":
    app.launch(server_name="0.0.0.0", server_port=7860)
