from datetime import datetime, timedelta
import gradio as gr
from huggingface_hub import InferenceClient
import os
import json
import logging
import requests
from typing import Optional
from tenacity import retry, stop_after_attempt, wait_fixed
from symptom_classifier import define_specialist
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

SCOPES = ['https://www.googleapis.com/auth/calendar']
CALENDAR_ID = os.environ.get('GOOGLE_CALENDAR_ID')
WEBHOOK_URL = os.environ.get('CONFIRMATION_WEBHOOK_URL')
MAX_RETRIES = 3

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ ---
def get_calendar_service():
    creds = service_account.Credentials.from_service_account_info(
        json.loads(os.environ['GOOGLE_CREDS']),
        scopes=SCOPES
    )
    return build('calendar', 'v3', credentials=creds)

def load_system_prompt():
    try:
        with open("prompt-doctor.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except Exception as e:
        logger.error(f"Error loading prompt: {e}")
        return "–í—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É. –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."

SYSTEM_PROMPT = load_system_prompt()
client = InferenceClient(token=os.environ.get("HF_TOKEN"))

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
@retry(stop=stop_after_attempt(MAX_RETRIES), wait=wait_fixed(2))
def send_webhook_confirmation(event_id: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    if not WEBHOOK_URL:
        logger.warning("WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        return
    
    payload = {
        "event_id": event_id,
        "status": "pending_confirmation"
    }
    
    try:
        response = requests.post(
            WEBHOOK_URL,
            json=payload,
            timeout=10
        )
        response.raise_for_status()
        logger.info(f"Webhook –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        raise

def check_duplicate_event(name: str, time: datetime) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
    try:
        service = get_calendar_service()
        events_result = service.events().list(
            calendarId=CALENDAR_ID,
            timeMin=time.isoformat(),
            timeMax=(time + timedelta(minutes=30)).isoformat(),
            q=f"–ü—Ä–∏–µ–º: {name}",
            maxResults=1
        ).execute()
        
        return len(events_result.get('items', [])) > 0
    except HttpError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {str(e)}")
        return False

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
def schedule_appointment(name: str, symptoms: str) -> Optional[str]:
    try:
        if check_duplicate_event(name, datetime.now()):
            return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        
        specialist = define_specialist(symptoms)
        appointment_time = datetime.now() + timedelta(hours=3)
        
        service = get_calendar_service()
        event = {
            'summary': f'–ü—Ä–∏–µ–º: {name}, {specialist}',
            'description': f'–°–∏–º–ø—Ç–æ–º—ã: {symptoms}',
            'start': {'dateTime': appointment_time.isoformat(), 'timeZone': 'Europe/Moscow'},
            'end': {'dateTime': (appointment_time + timedelta(minutes=30)).isoformat(), 'timeZone': 'Europe/Moscow'},
            'extendedProperties': {'private': {'requiresConfirmation': 'true'}}
        }
        
        created_event = service.events().insert(
            calendarId=CALENDAR_ID,
            body=event
        ).execute()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        send_webhook_confirmation(created_event['id'])
        
        return f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –∫ {specialist} –Ω–∞ {appointment_time.strftime('%d.%m.%Y %H:%M')} —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    
    except HttpError as e:
        logger.error(f"Google API error: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio ---
def generate_response(message: str, history: list):
    try:
        if "–∑–∞–ø–∏—Å—å" in message.lower() or "—Å–∏–º–ø—Ç–æ–º" in message.lower():
            if not hasattr(generate_response, "step"):
                generate_response.step = 0
            
            if generate_response.step == 0:
                generate_response.step = 1
                return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)."
            
            if generate_response.step == 1:
                generate_response.step = 0
                parts = message.split(',', 1)
                if len(parts) < 2:
                    return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Å–∏–º–ø—Ç–æ–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
                
                name, symptoms = parts[0].strip(), parts[1].strip()
                response = schedule_appointment(name, symptoms)
                return response or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."
        
        prompt = f"{SYSTEM_PROMPT}\n\n–î–∏–∞–ª–æ–≥:\n{history}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}\n–ü–æ–º–æ—â–Ω–∏–∫:"
        stream = client.text_generation(
            prompt,
            max_new_tokens=512,
            temperature=0.3,
            stream=True
        )
        
        full_response = ""
        for token in stream:
            full_response += token
            yield full_response
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        yield "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."

custom_theme = gr.themes.Default(
    primary_hue="blue",
    secondary_hue="teal",
    font=[gr.themes.GoogleFont("Open Sans")]
)

with gr.Blocks(theme=custom_theme) as app:
    gr.Markdown("# Doctor AI ü§ñ")
    gr.Markdown("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º")
    
    gr.ChatInterface(
        fn=generate_response,
        examples=[
            ["–ù—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã..."],
            ["–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤, –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç—É..."]
        ]
    )

if __name__ == "__main__":
    app.launch(server_name="0.0.0.0", server_port=7860)
